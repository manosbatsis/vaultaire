apply plugin: "idea"
apply plugin: 'kotlin-kapt'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'


def generatedSourcesDir = project.file("build/generated/source/kaptKotlin/main")
sourceSets {
    main {
        kotlin.srcDirs += generatedSourcesDir
    }
}

idea {
    module {
        sourceDirs += generatedSourcesDir
        generatedSourceDirs += generatedSourcesDir
    }
}

cordapp {
    targetPlatformVersion 4
    minimumPlatformVersion 3
    workflow {
        // TODO: Update with your own
        name "Vaultaire Example Cordapp Workflow"
        vendor "Manos Batsis"
        versionId 1
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

dependencies {
    cordaCompile project(':vaultaire')
    cordaCompile project(':vaultaire-plugin-accounts')
    cordaCompile project(':vaultaire-example-contract')
    kapt(project(':vaultaire-processor'))

    cordaCompile "com.github.manosbatsis.partiture:partiture:$partiture_version"

    cordaCompile "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordaCompile "$accounts_release_group:accounts-workflows:$accounts_release_version"
    cordaCompile "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    testImplementation ("$corda_release_group:corda-node-driver:$corda_release_version")
    testCompile project(':vaultaire-plugin-rsql')
    testCompile "org.assertj:assertj-core:3.10.0"
    testCompile "com.willowtreeapps.assertk:assertk:0.10"

    testImplementation "com.github.manosbatsis.corda.testacles:corda-testacles-mocknetwork:$corda_testacles_version"
    testImplementation "com.github.manosbatsis.corda.testacles:corda-testacles-nodedriver:$corda_testacles_version"
}
