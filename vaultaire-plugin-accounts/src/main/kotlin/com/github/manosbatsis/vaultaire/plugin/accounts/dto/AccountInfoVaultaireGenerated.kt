/*
 * Vaultaire: query DSL and data access utilities for Corda developers.
 * Copyright (C) 2018 Manos Batsis
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by Vaultaire,
//  see https://manosbatsis.github.io/vaultaire
// ----------------------------------------------------
package com.github.manosbatsis.vaultaire.plugin.accounts.dto

import com.github.manosbatsis.corda.rpc.poolboy.PoolBoyConnection
import com.github.manosbatsis.corda.rpc.poolboy.connection.NodeRpcConnection
import com.github.manosbatsis.vaultaire.annotation.ExtendedStateServiceBean
import com.github.manosbatsis.vaultaire.dsl.query.VaultQueryCriteriaCondition
import com.github.manosbatsis.vaultaire.plugin.accounts.service.dao.*
import com.github.manosbatsis.vaultaire.registry.Registry
import com.github.manosbatsis.vaultaire.service.ServiceDefaults
import com.github.manosbatsis.vaultaire.service.SimpleServiceDefaults
import com.github.manosbatsis.vaultaire.util.FieldWrapper
import com.github.manosbatsis.vaultaire.util.Fields
import com.github.manosbatsis.vaultaire.util.GenericFieldWrapper
import com.r3.corda.lib.accounts.contracts.internal.schemas.PersistentAccountInfo
import com.r3.corda.lib.accounts.contracts.states.AccountInfo
import net.corda.core.contracts.ContractState
import net.corda.core.contracts.UniqueIdentifier
import net.corda.core.identity.Party
import net.corda.core.messaging.CordaRPCOps
import net.corda.core.node.AppServiceHub
import net.corda.core.node.ServiceHub
import net.corda.core.node.services.CordaService
import java.util.*

/**
 * Provides easy access to fields of [PersistentAccountInfo]
 */
object PersistentAccountInfoFields : Fields<PersistentAccountInfo> {
  /**
   * Wraps [PersistentAccountInfo.id]
   */
  val id: GenericFieldWrapper<PersistentAccountInfo, UUID> =
      GenericFieldWrapper(PersistentAccountInfo::id)

  /**
   * Wraps [PersistentAccountInfo.name]
   */
  val name: GenericFieldWrapper<PersistentAccountInfo, String> =
      GenericFieldWrapper(PersistentAccountInfo::name)

  /**
   * Wraps [PersistentAccountInfo.host]
   */
  val host: GenericFieldWrapper<PersistentAccountInfo, Party> =
      GenericFieldWrapper(PersistentAccountInfo::host)

  override val fieldsByName: Map<String, FieldWrapper<PersistentAccountInfo>> = mapOf(
  	"id" to id ,
  	"name" to name ,
  	"host" to host 
  )

}

/**
 * Provides easy access to fields of [AccountInfo]
 */
object AccountInfoFields : Fields<AccountInfo> {
  /**
   * Wraps [AccountInfo.name]
   */
  val name: GenericFieldWrapper<AccountInfo, String> = GenericFieldWrapper(AccountInfo::name)

  /**
   * Wraps [AccountInfo.host]
   */
  val host: GenericFieldWrapper<AccountInfo, Party> = GenericFieldWrapper(AccountInfo::host)

  /**
   * Wraps [AccountInfo.identifier]
   */
  val identifier: GenericFieldWrapper<AccountInfo, UniqueIdentifier> =
      GenericFieldWrapper(AccountInfo::identifier)

  override val fieldsByName: Map<String, FieldWrapper<AccountInfo>> = mapOf(
  	"name" to name ,
  	"host" to host ,
  	"identifier" to identifier 
  )

}

/**
 * Generated helper for creating [AccountInfo] query conditions/criteria
 */
class PersistentAccountInfoConditions : VaultQueryCriteriaCondition<PersistentAccountInfo,
    PersistentAccountInfoFields>() {
  /**
   * The [ContractState] to create query criteria for, i.e. [AccountInfo]
   */
  override val contractStateType: Class<out ContractState> = AccountInfo::class.java

  /**
   * The [net.corda.core.schemas.StatePersistable] to create query criteria for, i.e.
   * [PersistentAccountInfo]
   */
  override val statePersistableType: Class<PersistentAccountInfo> =
      PersistentAccountInfo::class.java

  /**
   * Provides easy access to fields of [PersistentAccountInfo]
   */
  override val fields: PersistentAccountInfoFields = PersistentAccountInfoFields

  companion object {
    init {
      Registry.registerQueryDsl(PersistentAccountInfo::class,
          PersistentAccountInfoConditions::class)}
  }
}

/**
 * A [AccountInfo]-specific [AccountsAwareStateCordaServiceDelegate]
 */
@CordaService
open class AccountInfoCordaServiceDelegate(
  serviceHub: AppServiceHub
) : AccountsAwareStateCordaServiceDelegate<AccountInfo>(serviceHub, AccountInfo::class.java)

/**
 * A [AccountInfo]-specific [ExtendedAccountsAwareStateService]
 */
@ExtendedStateServiceBean
open class AccountInfoService(
  delegate: AccountsAwareStateServiceDelegate<AccountInfo>
) : ExtendedAccountsAwareStateService<AccountInfo, PersistentAccountInfo,
    PersistentAccountInfoFields, PersistentAccountInfoConditions>(delegate) {
  /**
   * Provides easy access to fields of [PersistentAccountInfo]
   */
  override val fields: PersistentAccountInfoFields = PersistentAccountInfoFields

  /**
   * The [net.corda.core.schemas.StatePersistable] to create query criteria for, i.e.
   * [PersistentAccountInfo]
   */
  override val statePersistableType: Class<PersistentAccountInfo> =
      PersistentAccountInfo::class.java

  init {
    criteriaConditionsType =  PersistentAccountInfoConditions::class.java}

  /**
   * ServiceHub-based constructor, creates a Corda Service delegate
   */
  constructor(serviceHub: ServiceHub) :
      this(serviceHub.cordaService(AccountInfoCordaServiceDelegate::class.java))

  /**
   * PoolBopy-based RPC connection pool constructor
   */
  constructor(poolBoy: PoolBoyConnection) :
      this(AccountsAwareStateServicePoolBoyDelegate(poolBoy, AccountInfo::class.java))

  /**
   * Legacy constructor without pool support
   */
  constructor(rpcOps: CordaRPCOps) :
      this(AccountsAwareStateServiceRpcDelegate(rpcOps, AccountInfo::class.java))

  /**
   * Legacy constructor without pool support
   */
  constructor(nodeRpcConnection: NodeRpcConnection) :
      this(AccountsAwareStateServiceRpcConnectionDelegate(nodeRpcConnection,
      AccountInfo::class.java))

  /**
   * DSL entry point function for [PersistentAccountInfoConditions]
   */
  override fun buildQuery(block: PersistentAccountInfoConditions.() -> Unit):
      PersistentAccountInfoConditions = PersistentAccountInfoConditions().apply(block)

  companion object {
    init {
      Registry.registerService(AccountInfo::class, AccountInfoService::class)}
  }
}

/**
 * DSL entry point function for [PersistentAccountInfoConditions]
 */
fun accountInfoQuery(block: PersistentAccountInfoConditions.() -> Unit):
    PersistentAccountInfoConditions = PersistentAccountInfoConditions().apply(block)
