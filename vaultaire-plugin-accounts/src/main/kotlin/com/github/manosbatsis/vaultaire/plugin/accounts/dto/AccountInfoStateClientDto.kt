/*
 * Vaultaire: query DSL and data access utilities for Corda developers.
 * Copyright (C) 2018 Manos Batsis
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 * USA
 */
// -------------------- DO NOT EDIT -------------------
//  This file is automatically generated by Vaultaire,
//  see https://manosbatsis.github.io/vaultaire
// ----------------------------------------------------
package com.github.manosbatsis.vaultaire.plugin.accounts.dto

import co.paralleluniverse.fibers.Suspendable
import com.github.manosbatsis.vaultaire.plugin.accounts.service.dao.AccountsAwareStateService
import com.github.manosbatsis.vaultaire.plugin.accounts.service.dto.VaultaireAccountsAwareStateClientDto
import com.github.manosbatsis.vaultaire.service.dao.StateService
import com.r3.corda.lib.accounts.contracts.states.AccountInfo
import net.corda.core.contracts.UniqueIdentifier
import net.corda.core.identity.CordaX500Name
import net.corda.core.serialization.CordaSerializable
import java.util.*

/**
 * A [AccountInfo]-specific [com.github.manosbatsis.kotlin.utils.api.Dto] implementation
 */
@CordaSerializable
data class AccountInfoStateClientDto(
        var name: String? = null,
        var host: CordaX500Name? = null,
        var identifier: UUID? = null,
        var externalId: String? = null
) : VaultaireAccountsAwareStateClientDto<AccountInfo> {
  /**
   * Create a patched copy of the given [AccountInfo] instance,
   * updated using this DTO's non-null properties.
   */
  @Suspendable
  override fun toPatched(original: AccountInfo, service: AccountsAwareStateService<AccountInfo>):
          AccountInfo {

    val hostResolved = toPartyOrDefault(this.host, original.host, service, "host")
    val patched = AccountInfo(
            name = this.name ?: original.name ?:errNull("name"),
            host = hostResolved,
            identifier = if (identifier != null) UniqueIdentifier(externalId, identifier!!)
            else original.identifier
    )
    return patched
  }

  /**
   * Create an instance of [AccountInfo], using this DTO's properties.
   * May throw a [DtoInsufficientStateMappingException]
   * if there is mot enough information to do so.
   */
  @Suspendable
  override fun toTargetType(service: AccountsAwareStateService<AccountInfo>): AccountInfo {
    try {
      val hostResolved = toParty(this.host, service, "host")
      return AccountInfo(
              name = this.name?:errNull("name"),
              host = hostResolved,
              identifier = if (identifier != null) UniqueIdentifier(externalId, identifier!!)
              else throw IllegalArgumentException("AccountInfoStateClientDto.toTargetType requireds a valid identifier")
      )
    } catch (e: Exception) {
      throw IllegalStateException("Failed converting DTO to AccountInfo", e)
    }
  }

  companion object {
    /**
     * Create a new DTO instance using the given [AccountInfo] as source.
     */
    fun from(original: AccountInfo, service: StateService<AccountInfo>? = null): AccountInfoStateClientDto = AccountInfoStateClientDto(
            name = original.name,
            host = original.host.name,
            identifier = original.identifier.id,
            externalId = original.identifier.externalId
    )

  }
}
